// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// ema.cpp
cpp11::doubles c_cumema(cpp11::doubles X, cpp11::doubles days, double n);
extern "C" SEXP _iroll_c_cumema(SEXP X, SEXP days, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_cumema(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(X), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(days), cpp11::as_cpp<cpp11::decay_t<double>>(n)));
  END_CPP11
}
// ema.cpp
cpp11::doubles c_ema(cpp11::doubles X, cpp11::doubles days, double n);
extern "C" SEXP _iroll_c_ema(SEXP X, SEXP days, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_ema(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(X), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(days), cpp11::as_cpp<cpp11::decay_t<double>>(n)));
  END_CPP11
}
// ema.cpp
cpp11::doubles c_ema_lin(cpp11::doubles X, cpp11::doubles days, double n);
extern "C" SEXP _iroll_c_ema_lin(SEXP X, SEXP days, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_ema_lin(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(X), cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(days), cpp11::as_cpp<cpp11::decay_t<double>>(n)));
  END_CPP11
}
// ema.cpp
cpp11::doubles c_ediversity(cpp11::integers X, size_t N, double n);
extern "C" SEXP _iroll_c_ediversity(SEXP X, SEXP N, SEXP n) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_ediversity(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(X), cpp11::as_cpp<cpp11::decay_t<size_t>>(N), cpp11::as_cpp<cpp11::decay_t<double>>(n)));
  END_CPP11
}
// ema.cpp
cpp11::integers c_cum_unique_count(cpp11::integers X, size_t N);
extern "C" SEXP _iroll_c_cum_unique_count(SEXP X, SEXP N) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_cum_unique_count(cpp11::as_cpp<cpp11::decay_t<cpp11::integers>>(X), cpp11::as_cpp<cpp11::decay_t<size_t>>(N)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_roll_min(cpp11::doubles ix, const cpp11::doubles& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
extern "C" SEXP _iroll_c_roll_min(SEXP ix, SEXP X, SEXP left_bound, SEXP right_bound, SEXP left_open, SEXP right_open, SEXP fill) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_roll_min(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ix), cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles&>>(X), cpp11::as_cpp<cpp11::decay_t<double>>(left_bound), cpp11::as_cpp<cpp11::decay_t<double>>(right_bound), cpp11::as_cpp<cpp11::decay_t<bool>>(left_open), cpp11::as_cpp<cpp11::decay_t<bool>>(right_open), cpp11::as_cpp<cpp11::decay_t<double>>(fill)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_roll_max(cpp11::doubles ix, const cpp11::doubles& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
extern "C" SEXP _iroll_c_roll_max(SEXP ix, SEXP X, SEXP left_bound, SEXP right_bound, SEXP left_open, SEXP right_open, SEXP fill) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_roll_max(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ix), cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles&>>(X), cpp11::as_cpp<cpp11::decay_t<double>>(left_bound), cpp11::as_cpp<cpp11::decay_t<double>>(right_bound), cpp11::as_cpp<cpp11::decay_t<bool>>(left_open), cpp11::as_cpp<cpp11::decay_t<bool>>(right_open), cpp11::as_cpp<cpp11::decay_t<double>>(fill)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_roll_mean(cpp11::doubles ix, const cpp11::doubles& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
extern "C" SEXP _iroll_c_roll_mean(SEXP ix, SEXP X, SEXP left_bound, SEXP right_bound, SEXP left_open, SEXP right_open, SEXP fill) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_roll_mean(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ix), cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles&>>(X), cpp11::as_cpp<cpp11::decay_t<double>>(left_bound), cpp11::as_cpp<cpp11::decay_t<double>>(right_bound), cpp11::as_cpp<cpp11::decay_t<bool>>(left_open), cpp11::as_cpp<cpp11::decay_t<bool>>(right_open), cpp11::as_cpp<cpp11::decay_t<double>>(fill)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_roll_sd(cpp11::doubles ix, const cpp11::doubles& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
extern "C" SEXP _iroll_c_roll_sd(SEXP ix, SEXP X, SEXP left_bound, SEXP right_bound, SEXP left_open, SEXP right_open, SEXP fill) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_roll_sd(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ix), cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles&>>(X), cpp11::as_cpp<cpp11::decay_t<double>>(left_bound), cpp11::as_cpp<cpp11::decay_t<double>>(right_bound), cpp11::as_cpp<cpp11::decay_t<bool>>(left_open), cpp11::as_cpp<cpp11::decay_t<bool>>(right_open), cpp11::as_cpp<cpp11::decay_t<double>>(fill)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_roll_sum(cpp11::doubles ix, const cpp11::doubles& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
extern "C" SEXP _iroll_c_roll_sum(SEXP ix, SEXP X, SEXP left_bound, SEXP right_bound, SEXP left_open, SEXP right_open, SEXP fill) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_roll_sum(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ix), cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles&>>(X), cpp11::as_cpp<cpp11::decay_t<double>>(left_bound), cpp11::as_cpp<cpp11::decay_t<double>>(right_bound), cpp11::as_cpp<cpp11::decay_t<bool>>(left_open), cpp11::as_cpp<cpp11::decay_t<bool>>(right_open), cpp11::as_cpp<cpp11::decay_t<double>>(fill)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_roll_prod(cpp11::doubles ix, const cpp11::doubles& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
extern "C" SEXP _iroll_c_roll_prod(SEXP ix, SEXP X, SEXP left_bound, SEXP right_bound, SEXP left_open, SEXP right_open, SEXP fill) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_roll_prod(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ix), cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles&>>(X), cpp11::as_cpp<cpp11::decay_t<double>>(left_bound), cpp11::as_cpp<cpp11::decay_t<double>>(right_bound), cpp11::as_cpp<cpp11::decay_t<bool>>(left_open), cpp11::as_cpp<cpp11::decay_t<bool>>(right_open), cpp11::as_cpp<cpp11::decay_t<double>>(fill)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_roll_first(cpp11::doubles ix, const cpp11::doubles& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
extern "C" SEXP _iroll_c_roll_first(SEXP ix, SEXP X, SEXP left_bound, SEXP right_bound, SEXP left_open, SEXP right_open, SEXP fill) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_roll_first(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ix), cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles&>>(X), cpp11::as_cpp<cpp11::decay_t<double>>(left_bound), cpp11::as_cpp<cpp11::decay_t<double>>(right_bound), cpp11::as_cpp<cpp11::decay_t<bool>>(left_open), cpp11::as_cpp<cpp11::decay_t<bool>>(right_open), cpp11::as_cpp<cpp11::decay_t<double>>(fill)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_roll_last(cpp11::doubles ix, const cpp11::doubles& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
extern "C" SEXP _iroll_c_roll_last(SEXP ix, SEXP X, SEXP left_bound, SEXP right_bound, SEXP left_open, SEXP right_open, SEXP fill) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_roll_last(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ix), cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles&>>(X), cpp11::as_cpp<cpp11::decay_t<double>>(left_bound), cpp11::as_cpp<cpp11::decay_t<double>>(right_bound), cpp11::as_cpp<cpp11::decay_t<bool>>(left_open), cpp11::as_cpp<cpp11::decay_t<bool>>(right_open), cpp11::as_cpp<cpp11::decay_t<double>>(fill)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_roll_quantile(cpp11::doubles ix, const cpp11::doubles& X, double left_bound, double right_bound, bool left_open, bool right_open, double prob, double fill);
extern "C" SEXP _iroll_c_roll_quantile(SEXP ix, SEXP X, SEXP left_bound, SEXP right_bound, SEXP left_open, SEXP right_open, SEXP prob, SEXP fill) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_roll_quantile(cpp11::as_cpp<cpp11::decay_t<cpp11::doubles>>(ix), cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles&>>(X), cpp11::as_cpp<cpp11::decay_t<double>>(left_bound), cpp11::as_cpp<cpp11::decay_t<double>>(right_bound), cpp11::as_cpp<cpp11::decay_t<bool>>(left_open), cpp11::as_cpp<cpp11::decay_t<bool>>(right_open), cpp11::as_cpp<cpp11::decay_t<double>>(prob), cpp11::as_cpp<cpp11::decay_t<double>>(fill)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_cummin(const cpp11::doubles X);
extern "C" SEXP _iroll_c_cummin(SEXP X) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_cummin(cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles>>(X)));
  END_CPP11
}
// iroll.cpp
cpp11::doubles c_cummax(const cpp11::doubles X);
extern "C" SEXP _iroll_c_cummax(SEXP X) {
  BEGIN_CPP11
    return cpp11::as_sexp(c_cummax(cpp11::as_cpp<cpp11::decay_t<const cpp11::doubles>>(X)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_iroll_c_cum_unique_count", (DL_FUNC) &_iroll_c_cum_unique_count, 2},
    {"_iroll_c_cumema",           (DL_FUNC) &_iroll_c_cumema,           3},
    {"_iroll_c_cummax",           (DL_FUNC) &_iroll_c_cummax,           1},
    {"_iroll_c_cummin",           (DL_FUNC) &_iroll_c_cummin,           1},
    {"_iroll_c_ediversity",       (DL_FUNC) &_iroll_c_ediversity,       3},
    {"_iroll_c_ema",              (DL_FUNC) &_iroll_c_ema,              3},
    {"_iroll_c_ema_lin",          (DL_FUNC) &_iroll_c_ema_lin,          3},
    {"_iroll_c_roll_first",       (DL_FUNC) &_iroll_c_roll_first,       7},
    {"_iroll_c_roll_last",        (DL_FUNC) &_iroll_c_roll_last,        7},
    {"_iroll_c_roll_max",         (DL_FUNC) &_iroll_c_roll_max,         7},
    {"_iroll_c_roll_mean",        (DL_FUNC) &_iroll_c_roll_mean,        7},
    {"_iroll_c_roll_min",         (DL_FUNC) &_iroll_c_roll_min,         7},
    {"_iroll_c_roll_prod",        (DL_FUNC) &_iroll_c_roll_prod,        7},
    {"_iroll_c_roll_quantile",    (DL_FUNC) &_iroll_c_roll_quantile,    8},
    {"_iroll_c_roll_sd",          (DL_FUNC) &_iroll_c_roll_sd,          7},
    {"_iroll_c_roll_sum",         (DL_FUNC) &_iroll_c_roll_sum,         7},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_iroll(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
