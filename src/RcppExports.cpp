// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// c_cumema
NumericVector c_cumema(NumericVector& X, NumericVector& days, double n);
RcppExport SEXP _iroll_c_cumema(SEXP XSEXP, SEXP daysSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cumema(X, days, n));
    return rcpp_result_gen;
END_RCPP
}
// c_ema
NumericVector c_ema(NumericVector& X, NumericVector& days, double n);
RcppExport SEXP _iroll_c_ema(SEXP XSEXP, SEXP daysSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ema(X, days, n));
    return rcpp_result_gen;
END_RCPP
}
// c_ema_lin
NumericVector c_ema_lin(NumericVector& X, NumericVector& days, double n);
RcppExport SEXP _iroll_c_ema_lin(SEXP XSEXP, SEXP daysSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type days(daysSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ema_lin(X, days, n));
    return rcpp_result_gen;
END_RCPP
}
// c_ediversity
NumericVector c_ediversity(IntegerVector& X, int N, double n);
RcppExport SEXP _iroll_c_ediversity(SEXP XSEXP, SEXP NSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(c_ediversity(X, N, n));
    return rcpp_result_gen;
END_RCPP
}
// c_cum_unique_count
IntegerVector c_cum_unique_count(IntegerVector& X, int N);
RcppExport SEXP _iroll_c_cum_unique_count(SEXP XSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cum_unique_count(X, N));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_min
NumericVector c_roll_min(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
RcppExport SEXP _iroll_c_roll_min(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_min(DATE, X, left_bound, right_bound, left_open, right_open, fill));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_max
NumericVector c_roll_max(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
RcppExport SEXP _iroll_c_roll_max(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_max(DATE, X, left_bound, right_bound, left_open, right_open, fill));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_mean
NumericVector c_roll_mean(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
RcppExport SEXP _iroll_c_roll_mean(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_mean(DATE, X, left_bound, right_bound, left_open, right_open, fill));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_sd
NumericVector c_roll_sd(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
RcppExport SEXP _iroll_c_roll_sd(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_sd(DATE, X, left_bound, right_bound, left_open, right_open, fill));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_sum
NumericVector c_roll_sum(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
RcppExport SEXP _iroll_c_roll_sum(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_sum(DATE, X, left_bound, right_bound, left_open, right_open, fill));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_prod
NumericVector c_roll_prod(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
RcppExport SEXP _iroll_c_roll_prod(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_prod(DATE, X, left_bound, right_bound, left_open, right_open, fill));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_first
NumericVector c_roll_first(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
RcppExport SEXP _iroll_c_roll_first(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_first(DATE, X, left_bound, right_bound, left_open, right_open, fill));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_last
NumericVector c_roll_last(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open, double fill);
RcppExport SEXP _iroll_c_roll_last(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_last(DATE, X, left_bound, right_bound, left_open, right_open, fill));
    return rcpp_result_gen;
END_RCPP
}
// c_roll_quantile
NumericVector c_roll_quantile(SEXP DATE, NumericVector& X, double left_bound, double right_bound, bool left_open, bool right_open, double prob, double fill);
RcppExport SEXP _iroll_c_roll_quantile(SEXP DATESEXP, SEXP XSEXP, SEXP left_boundSEXP, SEXP right_boundSEXP, SEXP left_openSEXP, SEXP right_openSEXP, SEXP probSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type DATE(DATESEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type X(XSEXP);
    Rcpp::traits::input_parameter< double >::type left_bound(left_boundSEXP);
    Rcpp::traits::input_parameter< double >::type right_bound(right_boundSEXP);
    Rcpp::traits::input_parameter< bool >::type left_open(left_openSEXP);
    Rcpp::traits::input_parameter< bool >::type right_open(right_openSEXP);
    Rcpp::traits::input_parameter< double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< double >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(c_roll_quantile(DATE, X, left_bound, right_bound, left_open, right_open, prob, fill));
    return rcpp_result_gen;
END_RCPP
}
// c_cummin
NumericVector c_cummin(const NumericVector& X);
RcppExport SEXP _iroll_c_cummin(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cummin(X));
    return rcpp_result_gen;
END_RCPP
}
// c_cummax
NumericVector c_cummax(const NumericVector& X);
RcppExport SEXP _iroll_c_cummax(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(c_cummax(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_iroll_c_cumema", (DL_FUNC) &_iroll_c_cumema, 3},
    {"_iroll_c_ema", (DL_FUNC) &_iroll_c_ema, 3},
    {"_iroll_c_ema_lin", (DL_FUNC) &_iroll_c_ema_lin, 3},
    {"_iroll_c_ediversity", (DL_FUNC) &_iroll_c_ediversity, 3},
    {"_iroll_c_cum_unique_count", (DL_FUNC) &_iroll_c_cum_unique_count, 2},
    {"_iroll_c_roll_min", (DL_FUNC) &_iroll_c_roll_min, 7},
    {"_iroll_c_roll_max", (DL_FUNC) &_iroll_c_roll_max, 7},
    {"_iroll_c_roll_mean", (DL_FUNC) &_iroll_c_roll_mean, 7},
    {"_iroll_c_roll_sd", (DL_FUNC) &_iroll_c_roll_sd, 7},
    {"_iroll_c_roll_sum", (DL_FUNC) &_iroll_c_roll_sum, 7},
    {"_iroll_c_roll_prod", (DL_FUNC) &_iroll_c_roll_prod, 7},
    {"_iroll_c_roll_first", (DL_FUNC) &_iroll_c_roll_first, 7},
    {"_iroll_c_roll_last", (DL_FUNC) &_iroll_c_roll_last, 7},
    {"_iroll_c_roll_quantile", (DL_FUNC) &_iroll_c_roll_quantile, 8},
    {"_iroll_c_cummin", (DL_FUNC) &_iroll_c_cummin, 1},
    {"_iroll_c_cummax", (DL_FUNC) &_iroll_c_cummax, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_iroll(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
